# -*- coding: utf-8 -*-
"""Classificação - Preço de venda dos carros.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HkIZb81k0Sk4RndTSGgGGamO12XdJQDL

# Imports e leitura do arquivo CSV
"""

import pandas as pd            # biblioteca que permite a leitura de CSVs
import numpy as np # Gera números para comparar
from sklearn.dummy import DummyClassifier # Usado para gerar a Baseline e ver a acurácia
from sklearn.model_selection import train_test_split # Usado para separar os dados de treino dos de teste
from sklearn.svm import LinearSVC # Importa a biblioteca do estimador
from sklearn.svm import SVC # Importa a biblioteca do estimador não linear
from sklearn.metrics import accuracy_score # Importa a biblioteca de acurácia
from datetime import datetime  # Importa a data atual para o cálculo da idade do carro
from sklearn.preprocessing import StandardScaler # Préprocessamento dos dados, usado para deixar os valores na mesma faixa e evitar alterações por diferentes faixas nos dados
from sklearn.tree import DecisionTreeClassifier # Biblioteca do estimador em arvore
from sklearn.tree import export_graphviz # exporta texto para ser plotado num gráfico
import graphviz #exibe o gráfico

uri = "https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv"
dados = pd.read_csv(uri)
dados.head()

"""# Renomeando as colunas"""

a_renomear = { 
    'mileage_per_year' : 'milhas_por_ano',
    'model_year'       : 'ano_do_modelo',
    'price'            : 'preco',
    'sold'             : 'vendido'
}
dados = dados.rename(columns=a_renomear)
dados.head()

"""# Corrigindo coluna 'vendido'"""

a_trocar = {
    'no'  : 0,
    'yes' : 1
} # altera para 0 e 1
dados.vendido = dados.vendido.map(a_trocar)
dados.head()

"""# Adicionando novas colunas"""

ano_atual = datetime.today().year # Ano atual
dados['idade_do_modelo'] = ano_atual - dados.ano_do_modelo # Calculo idade do modelo
dados ['km_por_ano'] = dados.milhas_por_ano * 1.60934 # Conversão em KM
dados.head()

"""# Apaga as colunas sem uso"""

dados = dados.drop(columns = ["Unnamed: 0", "milhas_por_ano", "ano_do_modelo"], axis=1) # axis=1 para não apagar as linhas invés das colunas
dados.head()

"""# Classificação com LinearSVC

Separa os valores para treino e teste, treina, faz a predição e valida a acurácia.
"""

x = dados[["preco", "idade_do_modelo", "km_por_ano"]] # Features
y = dados["vendido"]

SEED = 5 # N° Inicial da posição que será usada para separar o CSV em vetores, remove a aleatoriedade
np.random.seed(SEED) # Passa o padrão para aleatoriedade

# Popula as 4 variáveis informando que o teste terá 25% dos dados e a semente será o 20, para não ser radomico
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y) # stratify estratifica os dados para dividir proporcionalmente

print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC()# Instância do estimador
modelo.fit(treino_x, treino_y) # Ensina o estimador com os dados e as classes desses dados
previsoes = modelo.predict(teste_x) # Prediz oque cada item da lista é

acuracia = accuracy_score(teste_y, previsoes) * 100 # Valida a acurácia
print("A acurácia foi %.2f%%" % acuracia)

"""# BaseLine com Dummy

Dummy comstratified (valores equivalentes)
"""

dummy_stratified = DummyClassifier() # Instância do dummy
dummy_stratified.fit(treino_x, treino_y) # treino

acuracia = dummy_stratified.score(teste_x, teste_y) * 100
print("A acurácia do dummy_stratified foi %.2f%%" % acuracia)

"""# Dummy MostFrequent"""

dummy_mostfrequent = DummyClassifier(strategy="most_frequent")
dummy_mostfrequent.fit(treino_x, treino_y)

acuracia = dummy_mostfrequent.score(teste_x, teste_y) * 100
print("A acurácia do dummy mostfrequent foi %.2f%%" % acuracia)

"""# StandardScaler"""

# Popula as 4 variáveis informando que o teste terá 25% dos dados e a semente será o 20, para não ser radomico
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y) # stratify estratifica os dados para dividir proporcionalmente

print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

scaler = StandardScaler() # cria o escalador
scaler.fit(raw_treino_x) # Passa os valores a serem escalados na mesma faixa, nova escala aqui
treino_x = scaler.transform(raw_treino_x) # atribui ao treino_X a nova escala gerado no cru_treino_x
teste_x = scaler.transform(raw_teste_x) # atribui ao teste_X a nova escala

modelo = SVC() # Instância do estimador

modelo.fit(treino_x, treino_y) # Ensina o estimador com os dados e as classes desses dados

previsoes = modelo.predict(teste_x) # Prediz oque cada item da lista é

acuracia = accuracy_score(teste_y, previsoes) * 100 # Valida a acurácia
print("A acurácia foi %.2f%%" % acuracia)

"""# DecisionTreeClassifier"""

modelo = DecisionTreeClassifier(max_depth=3) #modelo de arvore com altura 3
modelo.fit(raw_treino_x, treino_y)
previsoes = modelo.predict(raw_teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

features = x.columns # nome das colunas para aparecer nos itens da arvore
dot_data = export_graphviz(modelo, # dados
                           out_file=None, # não vai exportar nada
                           filled = True, # preenchido com cores
                           rounded = True, # borda arredondada
                           feature_names = features, # nomes
                           class_names = ["não", "sim"] # Classes de retorno 0 ou 1
                           ) # exporta o texto para gerar o gráfico

grafico = graphviz.Source(dot_data) # monta o gráfico
grafico